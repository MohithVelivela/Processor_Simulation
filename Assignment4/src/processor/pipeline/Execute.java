package processor.pipeline;


import generic.Simulator;
import processor.Processor;

public class Execute {
	Control_Unit control_unit;
	Processor containingProcessor;
	OF_EX_LatchType OF_EX_Latch;
	EX_MA_LatchType EX_MA_Latch;
	EX_IF_LatchType EX_IF_Latch;
	Data_Interlock  data_interlock;
	IF_EnableLatchType IF_EnableLatch;
	IF_OF_LatchType IF_OF_Latch;

	public Execute(Processor containingProcessor, OF_EX_LatchType oF_EX_Latch, EX_MA_LatchType eX_MA_Latch, EX_IF_LatchType eX_IF_Latch,Control_Unit control_Unit,Data_Interlock data_Interlock, IF_EnableLatchType iF_EnableLatch,IF_OF_LatchType iF_OF_Latch)
	{
		this.containingProcessor = containingProcessor;
		this.OF_EX_Latch = oF_EX_Latch;
		this.EX_MA_Latch = eX_MA_Latch;
		this.EX_IF_Latch = eX_IF_Latch;
		this.control_unit = control_Unit;
		this.data_interlock = data_Interlock;
		this.IF_EnableLatch = iF_EnableLatch;
		this.IF_OF_Latch = iF_OF_Latch;
		}
	
	public void performEX() {
		//TODO
		int aluOutput=0;
		boolean nop = OF_EX_Latch.getNOP();
		System.out.println(OF_EX_Latch.isEX_enable());
		if(OF_EX_Latch.isEX_enable()){
		// Branching part of the Execute Unit
		int BranchTarget = OF_EX_Latch.getBranchTarget();
		boolean IsBranchTaken = false;
		// Generating IsBranchTaken signal,the only signal generated by unit other than Control Unit.
		// Maybe this part should be changed(see this later regaoperand2ing branchtarget of all kinds os branch statements.
		EX_IF_Latch.setBranchtarget(BranchTarget);
		EX_IF_Latch.setBranchTaken(IsBranchTaken); // to be continued .......
		//String temp = control_unit.getOpcode();
		String temp = OF_EX_Latch.getOpcode();
		EX_MA_Latch.setOpcode(temp);
		String operation  = control_unit.map_operation_name.get(temp);//gets the instruction from OF_EX_Latch
		int operand1 = OF_EX_Latch.getOperand1();
		int imm = OF_EX_Latch.getImmediate();
		int operand2 = OF_EX_Latch.getOperand2();
		control_unit.setLd(false);
		int nowPc = containingProcessor.getRegisterFile().getProgramCounter();
		if(nop)
		{
			operation = "nop";
		}
		
		EX_MA_Latch.setMA_enable(true);
		switch(operation){
			case "addi":
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1 + imm;
				break;
			case "subi":
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1 - imm;
				break;
			case "muli":
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1*imm;
				break;
			case "divi":
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1/imm;
				//System.out.println(aluOutput);
				containingProcessor.getRegisterFile().setValue(31, operand1%imm);
				break;
			case "andi":
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1&imm;
				break;
			case "ori":
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1 | imm;
				break;
			case "xori":
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1 ^ imm;
				break;
			case "slti":
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = 0;
				if(imm > operand1) aluOutput = 1;
				break;
			case "slli": 
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1 << imm;
				break;
			case "srli": 
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1 >>> imm;
				break;
			case "srai": 
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1 >> imm;
				break;
			case "load":
				operand1 = OF_EX_Latch.getOperand1();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand1 + imm;
				control_unit.setLd(true);
				break;
			case "store":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getrd_store_value();
				imm = OF_EX_Latch.getImmediate();
				aluOutput = operand2 + imm;
				control_unit.setSt(true);
				EX_MA_Latch.setOperand1(operand1);
				break;
			case "add":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = operand1 + operand2;
				break;
			case "sub":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = operand1 - operand2;
				break;
			case "mul":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = operand1 * operand2;
				break;
			case "div":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = operand1 / operand2;
				//containingProcessor.getRegisterFile().setValue(31, operand1%operand2);  testing?
				break; 
			case "and": 
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = operand1 & operand2;
				break;
			case "or":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = operand1 | operand2;
				break;
			case "xor":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = operand1 ^ operand2;
				break;
			case "slt":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = 0;
				if(operand2 > operand1) aluOutput = 1;
				break;
			case "sll":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = operand1 << operand2;
				break;
			case "srl":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = operand1 >>> operand2;
				break;
			case "sra":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getOperand2();
				aluOutput = operand1 >> operand2;
				break;
			case "beq":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getrd_store_value();
				imm = OF_EX_Latch.getImmediate();
				if(operand1==operand2){
					EX_IF_Latch.setBranchTaken(true);
					EX_IF_Latch.setBranchtarget(nowPc + imm);
					EX_IF_Latch.setIF_Enable(true);
					control_unit.setBeq(true);
				}
				else{
					EX_IF_Latch.setBranchTaken(false);
				}
				break;
			case "bgt":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getrd_store_value();
				imm = OF_EX_Latch.getImmediate();
				if(operand1>operand2){
					EX_IF_Latch.setBranchTaken(true);
					EX_IF_Latch.setBranchtarget(nowPc + imm);
					EX_IF_Latch.setIF_Enable(true);

				}
				else{
					EX_IF_Latch.setBranchTaken(false);
				}
				break;
			case "bne":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getrd_store_value();
				imm = OF_EX_Latch.getImmediate();
				if(operand1!=operand2){
					EX_IF_Latch.setBranchTaken(true);
					EX_IF_Latch.setBranchtarget(nowPc + imm);
					EX_IF_Latch.setIF_Enable(true);

				}
				else{
					EX_IF_Latch.setBranchTaken(false);
				}
				break;
			case "blt":
				operand1 = OF_EX_Latch.getOperand1();
				operand2 = OF_EX_Latch.getrd_store_value();
				imm = OF_EX_Latch.getImmediate();
				if(operand1<operand2){
					EX_IF_Latch.setBranchTaken(true);
					EX_IF_Latch.setBranchtarget(nowPc + imm);
					EX_IF_Latch.setIF_Enable(true);

				}
				else{
					EX_IF_Latch.setBranchTaken(false);
				}
				break;
			case "jmp":
				// Branching part of the Execute Unit
				BranchTarget = OF_EX_Latch.getBranchTarget();
				// Generating IsBranchTaken signal,the only signal generated by unit other than Control Unit.
				// Maybe this part should be changed(see this later regarding branchtarget of all kinds os branch statements.
				EX_IF_Latch.setBranchtarget(BranchTarget);
				//EX_IF_Latch.setBranchTaken(IsBranchTaken); // to be continued .......
				EX_IF_Latch.setBranchTaken(true);
				int rd = OF_EX_Latch.getrd();
				imm = OF_EX_Latch.getImmediate();
				EX_IF_Latch.setBranchtarget(nowPc + imm + rd);
				EX_IF_Latch.setIF_Enable(true);
				break;
			case "end":
				//control_unit.setEnd(true);
				//Simulator.setSimulationComplete(true);
				break;
			case "nop":
				EX_MA_Latch.setNOP(true);
				System.out.println("nop");
			default:
				System.out.print("Issue detected in R2I type, for branch statements");
				
		}	
			
			//System.out.println("Op1 "+operand1);	
			//System.out.println("Op2 "+operand2);
			//System.out.println("Immediate "+imm);			
			//System.out.println("ALU_out_inExecute "+aluOutput);
			
			OF_EX_Latch.setEX_enable(false);
			EX_MA_Latch.setAluOutput(aluOutput);
			EX_MA_Latch.setrd(OF_EX_Latch.getrd());
			/*if(operation!="add"){
			System.out.println(operation);
			System.out.println("Op1 "+operand1);	
			System.out.println("Op2 "+operand2);
			System.out.println("Immediate "+imm);			
			System.out.println("ALU_out_inExecute "+aluOutput);
			System.out.println("................................................................");
			}*/
		}







	}


}
