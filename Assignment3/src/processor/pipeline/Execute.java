package processor.pipeline;


import generic.Simulator;
import processor.Processor;

public class Execute {
	Control_Unit control_unit;
	Processor containingProcessor;
	OF_EX_LatchType OF_EX_Latch;
	EX_MA_LatchType EX_MA_Latch;
	EX_IF_LatchType EX_IF_Latch;

	public Execute(Processor containingProcessor, OF_EX_LatchType oF_EX_Latch, EX_MA_LatchType eX_MA_Latch, EX_IF_LatchType eX_IF_Latch,Control_Unit control_Unit)
	{
		this.containingProcessor = containingProcessor;
		this.OF_EX_Latch = oF_EX_Latch;
		this.EX_MA_Latch = eX_MA_Latch;
		this.EX_IF_Latch = eX_IF_Latch;
		this.control_unit = control_Unit;
	}
	
	public void performEX() {
		//TODO
		int aluOutput=0;
		if(OF_EX_Latch.isEX_enable()){
		// Branching part of the Execute Unit
		int BranchTarget = OF_EX_Latch.getBranchTarget();
		boolean IsBranchTaken = false;
		// Generating IsBranchTaken signal,the only signal generated by unit other than Control Unit.
		// Maybe this part should be changed(see this later regarding branchtarget of all kinds os branch statements.
		EX_IF_Latch.setBranchtarget(BranchTarget);
		EX_IF_Latch.setBranchTaken(IsBranchTaken); // to be continued .......
		String temp = control_unit.getOpcode();
		String operation  = control_unit.map_operation_name.get(temp);//gets the instruction from OF_EX_Latch
		int operand1 = OF_EX_Latch.getOperand1();
		int imm = OF_EX_Latch.getImmediate();
		int operand2 = OF_EX_Latch.getOperand2();
		int nowPc = containingProcessor.getRegisterFile().getProgramCounter();
				switch(operation){
					case "addi":
						aluOutput = operand1 + imm;
						break;
					case "subi":
						aluOutput = operand1 - imm;
						break;
					case "muli":
						aluOutput = operand1*imm;
						break;
					case "divi":
						aluOutput = operand1/imm;
						containingProcessor.getRegisterFile().setValue(31, operand1%imm);
						break;
					case "andi":
						aluOutput = operand1&imm;
						break;
					case "ori":
						aluOutput = operand1 | imm;
						break;
					case "xori":
						aluOutput = operand1 ^ imm;
						break;
					case "slti":
						aluOutput = 0;
						if(imm > operand1) aluOutput = 1;
						break;
					case "slli": 
						aluOutput = operand1 << imm;
						break;
					case "srli": 
						aluOutput = operand1 >>> imm;
						break;
					case "srai": 
						aluOutput = operand1 >> imm;
						break;
					case "load":
						aluOutput = operand1 + imm;
						control_unit.setLd(true);
						break;
					case "store":
						aluOutput = operand2 + imm;
						control_unit.setSt(true);
						break;
					case "add":
						aluOutput = operand1 + operand2;
						break;
					case "sub":
						aluOutput = operand1 - operand2;
						break;
					case "mul":
						aluOutput = operand1 * operand2;
						break;
					case "div":
						aluOutput = operand1 / operand2;
						containingProcessor.getRegisterFile().setValue(31, operand1%operand2);
						break;
					case "and": 
						aluOutput = operand1 & operand2;
						break;
					case "or":
						aluOutput = operand1 | operand2;
						break;
					case "xor":
						aluOutput = operand1 ^ operand2;
						break;
					case "slt":
						aluOutput = 0;
						if(operand2 > operand1) aluOutput = 1;
						break;
					case "sll":
						aluOutput = operand1 << operand2;
						break;
					case "srl":
						aluOutput = operand1 >>> operand2;
						break;
					case "sra":
						aluOutput = operand1 >> operand2;
						break;
					case "beq":
						if(operand1==operand2){
							EX_IF_Latch.setBranchTaken(true);
							EX_IF_Latch.setBranchtarget(nowPc + imm);
							EX_IF_Latch.setIF_Enable(true);
						}
						else{
							EX_IF_Latch.setBranchTaken(false);
						}
						break;
					case "bgt":
						if(operand1>operand2){
							EX_IF_Latch.setBranchTaken(true);
							EX_IF_Latch.setBranchtarget(nowPc + imm);
							EX_IF_Latch.setIF_Enable(true);

						}
						else{
							EX_IF_Latch.setBranchTaken(false);
						}
						break;
					case "bne":
						if(operand1!=operand2){
							EX_IF_Latch.setBranchTaken(true);
							EX_IF_Latch.setBranchtarget(nowPc + imm);
							EX_IF_Latch.setIF_Enable(true);

						}
						else{
							EX_IF_Latch.setBranchTaken(false);
						}
						break;
					case "blt":
						if(operand1<operand2){
							EX_IF_Latch.setBranchTaken(true);
							EX_IF_Latch.setBranchtarget(nowPc + imm);
							EX_IF_Latch.setIF_Enable(true);

						}
						else{
							EX_IF_Latch.setBranchTaken(false);
						}
						break;
					case "jmp":
						EX_IF_Latch.setBranchTaken(true);
						EX_IF_Latch.setBranchtarget(OF_EX_Latch.getBranchTarget());
						EX_IF_Latch.setIF_Enable(true);
						break;
					case "end":
						Simulator.setSimulationComplete(true);
						break;
					default:
						System.out.print("Issue detected in R2I type, for branch statements");
						
				}	
			//System.out.println("ALU_out_inExecute "+aluOutput);	
			EX_MA_Latch.setMA_enable(true);
			OF_EX_Latch.setEX_enable(false);
			EX_MA_Latch.setAluOutput(aluOutput);
			EX_MA_Latch.setOperand2(operand2);
			EX_MA_Latch.setOperand1(operand1);
		}







	}


}
